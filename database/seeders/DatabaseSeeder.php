<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use App\Models\Professional;
use App\Models\Service;
use App\Models\Employee;
use App\Models\Customer;
use App\Models\Availability;
use App\Models\PaymentMethod;
use App\Models\TransactionCategory;
use App\Models\Appointment;
use Carbon\Carbon;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database seguindo os Requisitos Funcionais (RF01-RF06)
     */
    public function run(): void
    {
        $this->command->info('üöÄ Iniciando popula√ß√£o do banco de dados...');
        $this->command->info('üìã Seguindo Requisitos Funcionais RF01-RF06');
        $this->command->newLine();
        
        // ============================================
        // RF01: USU√ÅRIO 1 + PROFESSIONAL (1:1)
        // ============================================
        $this->command->info('üë§ USU√ÅRIO 1: Sal√£o da Maria...');
        
        $user1 = User::create([
            'name' => 'Maria Silva',
            'email' => 'maria@salao.com',
            'password' => Hash::make('password'),
            'role' => 'usuario',
            'plan' => 'premium',
        ]);
        
        $professional1 = Professional::create([
            'user_id' => $user1->id,
            'name' => 'Sal√£o da Maria',
            'slug' => 'salao-da-maria',
            'email' => 'contato@salaodamaria.com',
            'phone' => '(11) 98765-4321',
            'brand_color' => '#E91E63',
            'template' => 'salon',
            'business_name' => 'Sal√£o da Maria - Beleza e Estilo',
            'bio' => 'Sal√£o especializado em cabelos, unhas e est√©tica facial. Mais de 10 anos de experi√™ncia.',
            'active' => true,
        ]);

        $this->command->info("  ‚úÖ User ID: {$user1->id} ‚Üí Professional ID: {$professional1->id}");
        
        // RF03: Cadastro de Funcion√°rios (com CPF)
        $this->command->info('  üë• Criando funcion√°rios (RF03)...');
        
        $emp1_1 = Employee::create([
            'professional_id' => $professional1->id,
            'name' => 'Ana Souza',
            'email' => 'ana@salaodamaria.com',
            'phone' => '(11) 98888-1111',
            'cpf' => '123.456.789-01',
            'color' => '#FF6B9D',
            'active' => true,
            'show_in_booking' => true,
        ]);
        
        $emp1_2 = Employee::create([
            'professional_id' => $professional1->id,
            'name' => 'Carla Santos',
            'email' => 'carla@salaodamaria.com',
            'phone' => '(11) 98888-2222',
            'cpf' => '987.654.321-09',
            'color' => '#C44569',
            'active' => true,
            'show_in_booking' => true,
        ]);
        
        $this->command->info("    ‚úÖ {$emp1_1->name} (CPF: {$emp1_1->cpf})");
        $this->command->info("    ‚úÖ {$emp1_2->name} (CPF: {$emp1_2->cpf})");
        
        // RF04: Cadastro de Servi√ßos (pode ou n√£o ter funcion√°rio vinculado)
        $this->command->info('  üìã Criando servi√ßos (RF04)...');
        
        // Servi√ßo 1: VINCULADO a funcion√°rio espec√≠fico
        $servico1_1 = Service::create([
            'professional_id' => $professional1->id,
            'name' => 'Corte de Cabelo Feminino',
            'description' => 'Corte moderno com acabamento profissional',
            'duration' => 60,
                'price' => 80.00,
            'active' => true,
        ]);
        $emp1_1->services()->attach($servico1_1->id);
        $this->command->info("    ‚úÖ {$servico1_1->name} ‚Üí Vinculado a: {$emp1_1->name}");
        
        // Servi√ßo 2: VINCULADO a outro funcion√°rio
        $servico1_2 = Service::create([
            'professional_id' => $professional1->id,
            'name' => 'Manicure e Pedicure',
            'description' => 'Cuidados completos para m√£os e p√©s',
                'duration' => 90,
            'price' => 60.00,
            'active' => true,
        ]);
        $emp1_2->services()->attach($servico1_2->id);
        $this->command->info("    ‚úÖ {$servico1_2->name} ‚Üí Vinculado a: {$emp1_2->name}");
        
        // Servi√ßo 3: SEM funcion√°rio vinculado (apenas profissional)
        $servico1_3 = Service::create([
            'professional_id' => $professional1->id,
            'name' => 'Escova Progressiva',
            'description' => 'Alisamento e hidrata√ß√£o profunda (feito pelo profissional)',
            'duration' => 120,
            'price' => 250.00,
                'active' => true,
        ]);
        $this->command->info("    ‚úÖ {$servico1_3->name} ‚Üí SEM funcion√°rio (apenas profissional)");
        
        // RF05: Cadastro de Disponibilidade (funcion√°rio OU profissional)
        $this->command->info('  ‚è∞ Criando disponibilidades (RF05)...');
        
        // Disponibilidade DO PROFISSIONAL (geral, employee_id = NULL)
        for ($day = 1; $day <= 5; $day++) {
            Availability::create([
                'professional_id' => $professional1->id,
                'employee_id' => null, // Profissional
                'day_of_week' => $day,
                'start_time' => '09:00:00',
                'end_time' => '18:00:00',
                'slot_duration' => 30,
            ]);
        }
        $this->command->info("    ‚úÖ Segunda a Sexta (09:00-18:00) ‚Üí Profissional");
        
        // Disponibilidade ESPEC√çFICA do Funcion√°rio 1
        Availability::create([
            'professional_id' => $professional1->id,
            'employee_id' => $emp1_1->id,
            'day_of_week' => 6, // S√°bado
            'start_time' => '09:00:00',
            'end_time' => '14:00:00',
            'slot_duration' => 30,
        ]);
        $this->command->info("    ‚úÖ S√°bado (09:00-14:00) ‚Üí Funcion√°rio: {$emp1_1->name}");
        
        // Clientes
        $this->command->info('  üë§ Criando clientes...');
        
        $customer1_1 = Customer::create([
            'professional_id' => $professional1->id,
            'name' => 'Juliana Oliveira',
            'email' => 'juliana@email.com',
            'phone' => '(11) 99999-1111',
        ]);
        
        // RF06: Agendamento
        $this->command->info('  üìÖ Criando agendamento exemplo (RF06)...');
        
        $appointment1 = Appointment::create([
            'professional_id' => $professional1->id,
            'service_id' => $servico1_1->id,
            'employee_id' => $emp1_1->id, // Servi√ßo vinculado a funcion√°rio
            'customer_id' => $customer1_1->id,
            'start_time' => Carbon::now()->next('Monday')->setTime(10, 0),
            'end_time' => Carbon::now()->next('Monday')->setTime(11, 0),
            'status' => 'confirmed',
            'notes' => 'Agendamento de teste para ' . $customer1_1->name,
        ]);
        $this->command->info("    ‚úÖ Agendamento: {$servico1_1->name} com {$emp1_1->name}");
        
        // M√©todos de pagamento
        PaymentMethod::create(['professional_id' => $professional1->id, 'name' => 'Dinheiro', 'active' => true]);
        PaymentMethod::create(['professional_id' => $professional1->id, 'name' => 'PIX', 'active' => true]);
        
        // Categorias de transa√ß√£o
        TransactionCategory::create(['professional_id' => $professional1->id, 'name' => 'Servi√ßos', 'type' => 'income', 'color' => '#10B981']);
        
        // ============================================
        // RF01: USU√ÅRIO 2 + PROFESSIONAL (1:1)
        // ============================================
        $this->command->newLine();
        $this->command->info('üë§ USU√ÅRIO 2: Cl√≠nica Dr. Jo√£o...');
        
        $user2 = User::create([
            'name' => 'Jo√£o Pereira',
            'email' => 'joao@clinica.com',
            'password' => Hash::make('password'),
            'role' => 'usuario',
            'plan' => 'master',
        ]);
        
        $professional2 = Professional::create([
            'user_id' => $user2->id,
            'name' => 'Cl√≠nica Est√©tica Dr. Jo√£o',
            'slug' => 'clinica-dr-joao',
            'email' => 'contato@clinicadrjoao.com',
            'phone' => '(11) 97654-3210',
            'brand_color' => '#3B82F6',
            'template' => 'clinic',
            'business_name' => 'Cl√≠nica Est√©tica Dr. Jo√£o Pereira',
            'bio' => 'Tratamentos est√©ticos avan√ßados com tecnologia de ponta.',
            'active' => true,
        ]);
        
        $this->command->info("  ‚úÖ User ID: {$user2->id} ‚Üí Professional ID: {$professional2->id}");
        
        // RF03: Cadastro de Funcion√°rios (com CPF)
        $this->command->info('  üë• Criando funcion√°rios (RF03)...');
        
        $emp2_1 = Employee::create([
            'professional_id' => $professional2->id,
            'name' => 'Dra. Fernanda Lima',
            'email' => 'fernanda@clinicadrjoao.com',
            'phone' => '(11) 97777-1111',
            'cpf' => '111.222.333-44',
            'color' => '#3B82F6',
            'active' => true,
            'show_in_booking' => true,
        ]);
        
        $emp2_2 = Employee::create([
            'professional_id' => $professional2->id,
            'name' => 'Rafael Alves',
            'email' => 'rafael@clinicadrjoao.com',
            'phone' => '(11) 97777-2222',
            'cpf' => '555.666.777-88',
            'color' => '#8B5CF6',
            'active' => true,
            'show_in_booking' => true,
        ]);
        
        $this->command->info("    ‚úÖ {$emp2_1->name} (CPF: {$emp2_1->cpf})");
        $this->command->info("    ‚úÖ {$emp2_2->name} (CPF: {$emp2_2->cpf})");
        
        // RF04: Cadastro de Servi√ßos
        $this->command->info('  üìã Criando servi√ßos (RF04)...');
        
        // Servi√ßo 1: VINCULADO a funcion√°ria
        $servico2_1 = Service::create([
            'professional_id' => $professional2->id,
            'name' => 'Limpeza de Pele Profunda',
            'description' => 'Limpeza completa com extra√ß√£o e m√°scara',
            'duration' => 90,
            'price' => 150.00,
            'active' => true,
        ]);
        $emp2_1->services()->attach($servico2_1->id);
        $this->command->info("    ‚úÖ {$servico2_1->name} ‚Üí Vinculado a: {$emp2_1->name}");
        
        // Servi√ßo 2: VINCULADO a outro funcion√°rio
        $servico2_2 = Service::create([
            'professional_id' => $professional2->id,
            'name' => 'Design de Sobrancelhas',
            'description' => 'Modelagem completa de sobrancelhas',
            'duration' => 45,
            'price' => 80.00,
            'active' => true,
        ]);
        $emp2_2->services()->attach($servico2_2->id);
        $this->command->info("    ‚úÖ {$servico2_2->name} ‚Üí Vinculado a: {$emp2_2->name}");
        
        // Servi√ßo 3: SEM funcion√°rio (feito pelo profissional/dono)
        $servico2_3 = Service::create([
            'professional_id' => $professional2->id,
            'name' => 'Harmoniza√ß√£o Facial',
            'description' => 'Preenchimento com √°cido hialur√¥nico (Dr. Jo√£o)',
            'duration' => 60,
            'price' => 800.00,
            'active' => true,
        ]);
        $this->command->info("    ‚úÖ {$servico2_3->name} ‚Üí SEM funcion√°rio (Dr. Jo√£o - profissional)");
        
        // RF05: Cadastro de Disponibilidade
        $this->command->info('  ‚è∞ Criando disponibilidades (RF05)...');
        
        // Disponibilidade DO PROFISSIONAL
        for ($day = 1; $day <= 5; $day++) {
            Availability::create([
                'professional_id' => $professional2->id,
                'employee_id' => null,
                'day_of_week' => $day,
                'start_time' => '08:00:00',
                'end_time' => '17:00:00',
                'slot_duration' => 30,
            ]);
        }
        $this->command->info("    ‚úÖ Segunda a Sexta (08:00-17:00) ‚Üí Profissional");
        
        // Disponibilidade ESPEC√çFICA de Funcion√°rio
        Availability::create([
            'professional_id' => $professional2->id,
            'employee_id' => $emp2_1->id,
            'day_of_week' => 6,
            'start_time' => '08:00:00',
            'end_time' => '12:00:00',
            'slot_duration' => 30,
        ]);
        $this->command->info("    ‚úÖ S√°bado (08:00-12:00) ‚Üí Funcion√°ria: {$emp2_1->name}");
        
        // Cliente
        $customer2_1 = Customer::create([
            'professional_id' => $professional2->id,
            'name' => 'Mariana Rodrigues',
            'email' => 'mariana@email.com',
            'phone' => '(11) 96666-1111',
        ]);
        
        // RF06: Agendamento
        $this->command->info('  üìÖ Criando agendamento exemplo (RF06)...');
        
        $appointment2 = Appointment::create([
            'professional_id' => $professional2->id,
            'service_id' => $servico2_1->id,
            'employee_id' => $emp2_1->id,
            'customer_id' => $customer2_1->id,
            'start_time' => Carbon::now()->next('Tuesday')->setTime(10, 0),
            'end_time' => Carbon::now()->next('Tuesday')->setTime(11, 30),
            'status' => 'confirmed',
            'notes' => 'Agendamento de teste para ' . $customer2_1->name,
        ]);
        $this->command->info("    ‚úÖ Agendamento: {$servico2_1->name} com {$emp2_1->name}");
        
        // M√©todos de pagamento
        PaymentMethod::create(['professional_id' => $professional2->id, 'name' => 'Cart√£o', 'active' => true]);
        PaymentMethod::create(['professional_id' => $professional2->id, 'name' => 'Transfer√™ncia', 'active' => true]);
        
        // Categorias
        TransactionCategory::create(['professional_id' => $professional2->id, 'name' => 'Consultas', 'type' => 'income', 'color' => '#059669']);
        
        // ============================================
        // RESUMO
        // ============================================
        $this->command->newLine();
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->info('‚úÖ BANCO DE DADOS POPULADO COM SUCESSO!');
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->newLine();
        
        $this->command->info('üìä RESUMO - Requisitos Funcionais Implementados:');
        $this->command->newLine();
        
        $this->command->info('‚úÖ RF01: Usu√°rio ‚Üî Professional (1:1)');
        $this->command->info('‚úÖ RF02: Autentica√ß√£o (login com email/senha)');
        $this->command->info('‚úÖ RF03: Funcion√°rios (com Nome, Email, Telefone, CPF)');
        $this->command->info('‚úÖ RF04: Servi√ßos (com/sem funcion√°rio vinculado)');
        $this->command->info('‚úÖ RF05: Disponibilidade (funcion√°rio OU profissional)');
        $this->command->info('‚úÖ RF06: Agendamento (servi√ßo + funcion√°rio/profissional + data/hora + cliente)');
        $this->command->newLine();
        
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->info('üë§ USU√ÅRIO 1: Sal√£o da Maria');
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->info('   üìß Email: maria@salao.com');
        $this->command->info('   üîë Senha: password');
        $this->command->info('   üÜî User ID: ' . $user1->id);
        $this->command->info('   üè¢ Professional ID: ' . $professional1->id);
        $this->command->info('   üîó P√°gina: /salao-da-maria');
        $this->command->newLine();
        $this->command->info('   Servi√ßos:');
        $this->command->info('   ‚Ä¢ Corte de Cabelo ‚Üí Ana Souza (funcion√°ria)');
        $this->command->info('   ‚Ä¢ Manicure ‚Üí Carla Santos (funcion√°ria)');
        $this->command->info('   ‚Ä¢ Escova Progressiva ‚Üí Profissional (sem funcion√°rio)');
        $this->command->newLine();
        
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->info('üë§ USU√ÅRIO 2: Cl√≠nica Dr. Jo√£o');
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->info('   üìß Email: joao@clinica.com');
        $this->command->info('   üîë Senha: password');
        $this->command->info('   üÜî User ID: ' . $user2->id);
        $this->command->info('   üè¢ Professional ID: ' . $professional2->id);
        $this->command->info('   üîó P√°gina: /clinica-dr-joao');
        $this->command->newLine();
        $this->command->info('   Servi√ßos:');
        $this->command->info('   ‚Ä¢ Limpeza de Pele ‚Üí Dra. Fernanda (funcion√°ria)');
        $this->command->info('   ‚Ä¢ Design de Sobrancelhas ‚Üí Rafael (funcion√°rio)');
        $this->command->info('   ‚Ä¢ Harmoniza√ß√£o Facial ‚Üí Dr. Jo√£o (profissional)');
        $this->command->newLine();
        
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->info('üöÄ COMO TESTAR:');
        $this->command->info('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        $this->command->info('1. Acesse: /login');
        $this->command->info('2. Fa√ßa login com maria@salao.com ou joao@clinica.com');
        $this->command->info('3. Veja apenas SEUS cadastros no painel');
        $this->command->info('4. Acesse as p√°ginas p√∫blicas:');
        $this->command->info('   ‚Ä¢ /salao-da-maria');
        $this->command->info('   ‚Ä¢ /clinica-dr-joao');
        $this->command->info('5. Teste o agendamento p√∫blico (RF06)');
        $this->command->newLine();
    }
}
